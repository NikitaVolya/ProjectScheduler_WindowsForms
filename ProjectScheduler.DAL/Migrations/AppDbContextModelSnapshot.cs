// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectScheduler.DAL;

#nullable disable

namespace ProjectScheduler.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectScheduler.DAL.Entities.SchedulerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorBlue")
                        .HasColumnType("int");

                    b.Property<int>("ColorGreen")
                        .HasColumnType("int");

                    b.Property<int>("ColorRed")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchedulerProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchedulerProjectId");

                    b.ToTable("SchedulerCategories");
                });

            modelBuilder.Entity("ProjectScheduler.DAL.Entities.SchedulerMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchedulerProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchedulerProjectId");

                    b.ToTable("SchedulerMembers");
                });

            modelBuilder.Entity("ProjectScheduler.DAL.Entities.SchedulerProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SchedulerProjects");
                });

            modelBuilder.Entity("ProjectScheduler.DAL.Entities.SchedulerTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SchedulerTasks");
                });

            modelBuilder.Entity("ProjectScheduler.DAL.Entities.SchedulerCategory", b =>
                {
                    b.HasOne("ProjectScheduler.DAL.Entities.SchedulerProject", "SchedulerProject")
                        .WithMany("SchedulerCategories")
                        .HasForeignKey("SchedulerProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchedulerProject");
                });

            modelBuilder.Entity("ProjectScheduler.DAL.Entities.SchedulerMember", b =>
                {
                    b.HasOne("ProjectScheduler.DAL.Entities.SchedulerProject", "SchedulerProject")
                        .WithMany("SchedulerMembers")
                        .HasForeignKey("SchedulerProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchedulerProject");
                });

            modelBuilder.Entity("ProjectScheduler.DAL.Entities.SchedulerTask", b =>
                {
                    b.HasOne("ProjectScheduler.DAL.Entities.SchedulerCategory", "SchedulerCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectScheduler.DAL.Entities.SchedulerMember", "SchedulerOwner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectScheduler.DAL.Entities.SchedulerProject", "SchedulerProject")
                        .WithMany("SchedulerTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchedulerCategory");

                    b.Navigation("SchedulerOwner");

                    b.Navigation("SchedulerProject");
                });

            modelBuilder.Entity("ProjectScheduler.DAL.Entities.SchedulerProject", b =>
                {
                    b.Navigation("SchedulerCategories");

                    b.Navigation("SchedulerMembers");

                    b.Navigation("SchedulerTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
